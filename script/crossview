#!/usr/bin/env perl
use warnings;
use strict;

use Getopt::Long		qw(GetOptions);
use Term::ReadPassword 	qw(read_password);
use FindBin 			qw($Bin);
use lib 				"$Bin/../lib";

use CrossView::Simple qw(
    make_server make_client
    kill_server
    random_password
);

my %help;
$help{usage} = <<"EOH";
CrossView $CrossView::Simple::VERSION
Usage: $0 [OPTIONS] [USER@]HOSTNAME
Options:
    -c                Client mode - connect to a remote desktop (default).
    -s                Server mode - allow your desktop to be connected to.
    -i                Identify with key and passphrase when connecting to SSH.
    -h, --help        Show program help.
    -v, --version     Show the version number.

    Client mode options:
    -p PORT_NO        Port number on proxy host to connect to.

    Server mode options:
    -d SESSION        X session to enable viewing of (usually '0' for current)
    --no-pw           Run VNC server without a password.
    --password PASSWD Use specified password for VNC server/client login. If not
                      specified, a random default password will be generated. If
                      you explicitly do not want to set a VNC password, use the
                      --no-pw option.
    --pick-window     Will launch the xwininfo(1) tool for graphically selecting
                      a window to be shared.
    --viewonly        Only allow viewing of session.
    -w WINDOW_ID      Share only window with the specified Window ID. A Window
                      ID is in hex format like 0xaabbccdd. To choose a window
                      without specifying its ID, see --pick-window.
EOH
$help{help} = <<"EOH";
Enables a remote desktop to be viewed over a common SSH proxy. The machine to
show its desktop first starts the program in 'server mode', establishing a
connection to the proxy and forwarding a local port. A client wishing to connect
should then launch the program in 'client mode', also connecting to the proxy
and using the established tunnel to view the remote desktop.

CrossView example uses:
$0 -s -d 0 user\@someproxy.example.com
    Server mode - initialize SSH connection to someproxy.example.com over which
    VNC traffic will be routed.
$0 -s -d 0 user:pass\@someproxy.example.com
    Same example, explicitly specify password to use for login.
$0 -s -d 0 localhost
    Do not use proxy server, setup port for connecting to localhost (firewall
    dependant).
$0 -c -p 9000 user\@someproxy.example.com
    Client mode - connect to proxy host and use port 9000 for VNC traffic. The
    port number depends on what port the server forwarded.

See crossview(1) for more information.
EOH

# app config
my %C = (
	server_mode 	=> undef,
	client_mode 	=> undef,
	remote_port 	=> undef,
	display 		=> 0,
	key_file 		=> undef,
	help 			=> undef,
	version 		=> undef,
	vnc_password 	=> undef,
	viewonly 		=> undef,
    windowid        => undef,
    pickwindow      => undef,
);

GetOptions(
	\%C,
	'server_mode|server-mode|server|s',
	'client_mode|client-mode|client|c',
	'remote_port|remote-port|port|p:i',
	'display|d:i',
	'key_file|key-file|i',
	'help|h' => sub {
        print $help{usage}, "\n", $help{help};
        exit;
    },
	'version|v' => sub {
        print ((split /\n/, $help{usage})[0], "\n");
        exit;
    },
	'vnc_password|vnc-password|password:s',
    'no_pw|no-pw|nopw' => sub {
        $C{vnc_password} = '';
    },
	'viewonly',
    'windowid|window-id|window_id|w:s',
    'pickwindow|pick-window|pick_window'
) or die $help{usage};

unless (@ARGV) {
    die "Too few parameters given - HOSTNAME is mandatory.\n$help{usage}";
}

$C{client_mode} = !$C{server_mode};
$C{vnc_password} //= random_password();

# get connection string in format [USER[:PW]@]HOST[:PORT]
($C{ssh_user}, $C{ssh_password}, $C{ssh_host}, $C{ssh_port}) =
    $ARGV[0] =~ m/^(?:([^:@]*):?([^@]*)@)?([^:]+):?(\d*)/;

if (!$C{ssh_password} || defined $C{key_file}) {
    $C{ssh_password} = read_password(
        "Enter " . ($C{key_file} ? "passphrase" : "password") . " for " .
        ($C{ssh_user} ? $C{ssh_user} . '@' : '') . "$C{ssh_host}: ");
}

my $connection = 0;

if ($C{server_mode}) {
    $connection = make_server(\%C);

    # server forever (until ctrl-c)
    my $run = 1;
    use sigtrap 'handler' => sub { $run = 0; }, qw(INT QUIT);

    while ($run) {
        sleep 10;
    }

    print "Shutting down - killing server.\n";
    kill_server($connection);
}
else {
    $connection = make_client(\%C);
}

=pod

=head1 NAME

crossview - Wrapper for VNC over a common SSH host

=head1 SYNOPSIS

Usage:

  crossview [-c] [-s] [-i] [-h|--help] [-v|--version] [-p PORT_NO]
  [-d X_DISPLAY] [--password PASSWORD] [--no-pw] [--viewonly] [--pick-window]
  [-w|--window-id X_WINDOW_ID] [USER[:PASSWORD]@]HOST[:PORT]

To start the server, specify a display to share and an SSH proxy over which to
allow the connection:

marin@ananas:~$ crossview -s -d 0 user@hostname
Run crossview on client with the following options:
crossview -c -p 9000 [USER@]hostname

You can now run the client application to connect to the server via the given
port and SSH host.

ivana@pelikan:~$ crossview -c -p 9000 user@hostname

=head1 DESCRIPTION

CrossView allows a desktop X session to be shared via an SSH proxy server with
another computer. First, x11vnc(1) will be started. Using ssh(1), a connection
will be established towards another computer and the local port used for
connecting to X11VNC will be forwarded. Another crossview user connecting to the
SSH proxy can connect to the session, thereby bypassing any NAT or firewalls
that would impede a direct connection.

The synopsis above gives a basic working example. Try crossview --help for more
information or see the crossview manual page.

=head1 OPTIONS

-s

    Start in server mode (share a desktop)

-c

    Start in client mode (connect to a desktop)

-i

    Use key/passphrase authentication towards the SSH server instead of
    username/password.

-h, --help

    Show program help

-v, --version

    Show program version

-p

    Client mode only. Connect to specified forwarded port on proxy server. To
    connect to a different SSH port (not 22), use the hostname:port notation
    when specifying the SSH proxy's address.

-d

    Server mode only. Use the specified X session for displaying. The current
    desktop is usually 0 or 1, but this may vary depending on your settings.

--password

    Server mode only. Use the specified password for the VNC session. Provides
    additional security against people logged into the SSH proxy from viewing
    other sessions. If not specified, a randomly-generated eight-character
    password will be used. If you do not want a password to be used, use the
    --no-pw option.

--no-pw

    Server mode only. Explicitly run the VNC server without a password.

--viewonly

    Server mode only. Specify that a session is to be viewed only, with mouse
    and keyboard events not propagated to the target host.

--pick-window

    Server mode only. Will launch the xwininfo(1) tool for graphically selecting
    a window to be shared. Remote clients will only be able to see this window.

-w, --window-id

    Share only window with the specified Window ID. A Window ID is in hex format
    like 0xaabbccdd which can be obtained through the use of tools such as
    xwininfo(1). To choose a window without specifying its ID, see the
    --pick-window option.

=head1 INSTALLATION

See the INSTALL file for details.
 
=head1 AUTHORS
 
Marin Rukavina <marin@shinyshell.net>
  
=head1 COPYRIGHT
 
Copyright 2015 Marin Rukavina
 
This program is free software licenced under the BSD licence.
 
The full text of the license can be found in the LICENSE file included with this
module.
 
=cut