#!/usr/bin/env perl
use warnings;
use strict;

use Getopt::Long;
use Term::ReadPassword;
use Data::Dumper;
use FindBin qw($Bin);
use lib "$Bin/../lib";

use CrossView::Simple qw(
    make_server make_client
    kill_server
);

my $usage = <<"EOF";
CrossView $CrossView::Simple::VERSION
Usage: $0 [OPTIONS] [USER@]HOSTNAME
Options:
    -c                Client mode - connect to a remote desktop (default)
    -s                Server mode - allow your desktop to be connected to
    -i                Identify with public key when connecting to SSH
    -h
    --help            Show program help
    -v
    --version         Show the version number

    Client mode options:
    -p PORT_NO        Port number on proxy host to connect to

    Server mode options:
    -d SESSION        X session to enable viewing of (usually '0' for current)
    --password PASSWD Use specified password for VNC server/client login.
    --viewonly 		  Only allow viewing of session.
EOF

# process command-line flags and arguments
my $server = 0;
my $client = 0;
my $remote_port = 0;
my $display = 0;
my $public_key_file = '';
my $help = 0;
my $version = 0;
my $vnc_password = '';
my $viewonly = 0;

GetOptions(
	'c'	  => \$client,
	's'	  => \$server,
	'p:i'	=> \$remote_port,
	'd:i'	=> \$display,
	'i'	=> \$public_key_file,
	'h|help' => \$help,
    'v|version' => \$version,
    'password:s' => \$vnc_password,
    'viewonly' => \$viewonly,
) or die $usage;

if ($help) {
	print $usage . "\n";
	print <<"EOF";
Enables a remote desktop to be viewed over a common SSH proxy. The machine to
show its desktop first starts the program in 'server mode', establishing a
connection to the proxy and forwarding a local port. A client wishing to connect
should then launch the program in 'client mode', also connecting to the proxy
and using the established tunnel to view the remote desktop.

CrossView example uses:
$0 -s -d 0 user\@someproxy.example.com
	Server mode - initialize SSH connection to someproxy.example.com over which
	VNC traffic will be routed.
$0 -s -d 0 user:pass\@someproxy.example.com
	Same example, explicitly specify password to use for login.
$0 -s -d 0 localhost
	Do not use proxy server, setup port for connecting to localhost (firewall
	dependant).
$0 -c -p 9000 user\@someproxy.example.com
	Client mode - connect to proxy host and use port 9000 for VNC traffic. The
	port number depends on what port the server forwarded.
EOF
	exit;
}
if ($version) {
    print ((split /\n/, $usage)[0] . "\n");
    exit;
}

unless ($#ARGV == 0) {
	die "Too many parameters given where HOSTNAME was expected.\n$usage";
}

$client = !$server;

# get connection string in format [USER[:PW]@]HOST[:PORT]
my ($user, $password, $host, $port) =
	$ARGV[0] =~ m/^(?:([^:@]*):?([^@]*)@)?([^:]+):?(\d*)/;

if (!$password || $public_key_file) {
	$password = read_password(
		"Enter " . ($public_key_file ? "passphrase" : "password") . " for " .
		($user ? $user . '@' : '') . "$host: ");
}

my $ssh_options = {
	host	 => $host,
	user	 => $user,
	password => $password,
	port	 => $port,
	keyfile  => $public_key_file,
};

my $connection = 0;

if ($server) {
	$connection = make_server($display, $viewonly, $vnc_password, $ssh_options);

	# server forever (until ctrl-c)
	my $run = 1;
	use sigtrap 'handler' => sub { $run = 0; }, qw(INT QUIT);

	while ($run) {
	    sleep 10;
	}

	print "Shutting down - killing " . ($server ? 'server' : 'client') . ".\n";
	kill_server($connection);
}
else {
	$connection = make_client($remote_port, $vnc_password, $ssh_options);
}

=pod

=head1 NAME

crossview - Wrapper for VNC over a common SSH host

=head1 SYNOPSIS

Usage:
  crossview [-c] [-s] [-i] [-h|--help] [-v|--version] [-p port] [-d X session]
  [--password password] [--viewonly] [user[:password]@]host[:port]

To start the server, specify a display to share and an SSH proxy over which to
allow the connection:

marin@ananas:~$ crossview -s -d 0 user@hostname
Run crossview on client with the following options:
crossview -c -p 9000 [USER@]hostname

You can now run the client application to connect to the server via the given
port and SSH host.

ivana@pelikan:~$ crossview -c -p 9000 user@hostname

=head1 DESCRIPTION

CrossView allows a desktop X session to be shared via an SSH proxy server with
another computer. First, x11vnc(1) will be started. Using ssh(1), a connection
will be established towards another computer and the local port used for
connecting to X11VNC will be forwarded. Another crossview user connecting to the
SSH proxy can connect to the session, thereby bypassing any NAT or firewalls
that would impede a direct connection.

The synopsis above gives a basic working example. Try crossview --help for more
information or see the CrossView::Simple manual page.

=head1 OPTIONS

-s
	Start in server mode (share a desktop)
-c
	Start in client mode (connect to a desktop)
-i
	Use public key / passphrase authentication towards the SSH server instead of
	username/password.
-h, --help
	Show program help
-v, --version
	Show program version
-p
	Client mode only. Connect to specified forwarded port on proxy server. To
	connect to a different SSH port (not 22), use the hostname:port notation
	when specifying the SSH proxy's address.
-d
	Server mode only. Use the specified X session for displaying. The current
	desktop is usually 0 or 1, but this may vary depending on your settings.
--password
	Server mode only. Use the specified password for the VNC session. Provides
	additional security against people logged into the SSH proxy from viewing
	other sessions.
--viewonly
	Server mode only. Specify that a session is to be viewed only, with mouse
	and keyboard events not propagated to the target host.

=head1 INSTALLATION

See the INSTALL file for details.
 
=head1 AUTHORS
 
Marin Rukavina <marin@shinyshell.net>
  
=head1 COPYRIGHT
 
Copyright 2015 Marin Rukavina
 
This program is free software licenced under the BSD licence.
 
The full text of the license can be found in the LICENSE file included with this
module.
 
=cut